- Class: meta
  Course: Programando en R
  Lesson: Secuencias de Números
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: En esta lección, usted aprenderá cómo crear secuencias de números en R.

- Class: cmd_question
  Output: La forma más sencilla de crear una secuencia de números en el que R es mediante el uso del operador `:`. Escriba 1:20 para ver cómo funciona.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Escriba 1:20 sin espacios. Asegúrese de utilizar dos puntos regulares y no un punto y coma.

- Class: cmd_question
  Output: Eso nos dio todo entero entre 1 y 20 ambos inclusive. También podríamos utilizarlo para crear una secuencia de números reales. Por ejemplo, trate con pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Enter Introduzca pi:10 y ver qué pasa. pi es una constante predefinida en R que toma en el valor 3.1415....

- Class: text
  Output: El resultado es un vector de números reales que empiezan por pi (3.1415...) y el aumento va en incrementos de 1. Nunca se alcanza el límite superior de 10, ya que el siguiente número en nuestra secuencia sería mayor que 10.

- Class: cmd_question
  Output: "¿Qué pasa si hacemos 15:1? Dese la oportunidad de averiguarlo."
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Escriba 15:1 y pulse Intro.

- Class: text
  Output: Ha contado hacia atrás en incrementos de 1! Es poco probable que busquemos este comportamiento, pero sin embargo es bueno saber cómo podría suceder.

- Class: text
  Output: "Recuerde que si usted tiene preguntas acerca de una función de R en particular, puede acceder a su documentación con un signo de interrogación seguido del nombre de la función: ?Function_name_here. Sin embargo, en el caso de buscar la ayuda sobre un operador como el colon usado anteriormente, debe incluir el símbolo de acentos abiertos como éste: ?`:`. (NOTA: El acento grave (`) generalmente se encuentra en la esquina superior izquierda de un teclado, por encima de la lengüeta llave. Si usted no tiene una tecla de acento grave, puede utilizar comillas regulares.)"

- Class: cmd_question
  Output: Abra la documentación de `:` ahora.
  CorrectAnswer: ?`:`
  AnswerTests: ANY_of_exprs('?`:`', "?':'", '?":"')
  Hint: "Con el fin de ver la documentación de un símbolo como el operador de colon, usted tiene que utilizar acentos abiertos (o cotizaciones). Con esto, R sabe que no está intentando utilizar el símbolo en el comando. Así es como debe verse: ?`:`. No te olvides del simbolo de interrogación en el frente."

- Class: text
  Output: A menudo, vamos a desear más control sobre una secuencia que estamos creando de lo que el operador `:` nos da. La función seq() sirve para este propósito.

- Class: cmd_question
  Output: El uso más básico de seq() hace exactamente lo mismo que el operador `:`. Trate seq(1, 20) para ver esto.
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Escriba seq(1, 20) y pulse Enter. No se requiere el espacio después de la coma, pero se recomienda ya que tiende a hacer que el código parece más despejado.

- Class: cmd_question
  Output: Esto nos da el mismo resultado que 1:20. Sin embargo, vamos a decir que en lugar de eso quieren un vector de números que van de 0 a 10, incrementado en 0,5. seq(0, 10, by = 0.5) hace precisamente eso. Intentalo.
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: Usted todavía está utilizando la función seq() aquí, pero esta vez con un argumento extra que le dice a R que desea incrementar cada paso de la secuencia en 0,5. Pruebe seq(0, 10, by = 0.5).

- Class: cmd_question
  Output: O tal vez no nos importa el incremento y sólo queremos una secuencia de 30 números entre 5 y 10. seq(5, 10, length=30) produce este efecto. Hazlo ahora y almacena el resultado en una nueva variable llamada my_seq.
  CorrectAnswer: my_seq <- seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: 'Estas usando la misma función aquí, pero cambiando sus argumentos para diferentes resultados. Asegúrese de guardar el resultado en una nueva variable llamada my_seq, así: my_seq <- seq(5, 10, length=30).'

- Class: cmd_question
  Output: Para confirmar que my_seq tiene longitud 30, podemos utilizar la función length(). Inténtalo ahora.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Utilice length(my_seq) para ver la longitud de la variable my_seq.

- Class: text
  Output: Vamos a suponer que no sabemos la longitud de my_seq, pero queremos generar una secuencia de números enteros de 1 a N, donde N representa la longitud de la my_seq vector. En otras palabras, queremos un nuevo vector (1, 2, 3, ...) que es de la misma longitud de my_seq.

- Class: cmd_question
  Output: 'Hay varias maneras que podríamos hacer esto. Una posibilidad es combinar el operador `:` y la función de la length() así: 1:length(my_seq). Dese un intento. '
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Trate con 1:length(my_seq), sin asignar el resultado a una nueva variable.
  
- Class: cmd_question
  Output: Otra opción es utilizar seq(along.with = my_seq). Haga un intento.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Escriba seq(along.with = my_seq). Nótese que estamos usando la misma función seq(), pero con un argumento diferente llamado `along.with`. Esto le dice a R que desea una secuencia 'a lo largo de' la secuencia my_seq. Recuerde que usted puede escribir ?seq si tiene preguntas acerca de la función seq().

- Class: cmd_question
  Output: Sin embargo, como es el caso con muchas tareas comunes, R tiene una función incorporada especial para este propósito llamado seq_along(). Escriba seq_along(my_seq) para verlo en accion.
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: La función seq_along() es una variación de la función seq(). Trate seq_along(my_seq) para obtener el mismo resultado de otra manera.

- Class: text
  Output: A menudo hay varios enfoques para resolver el mismo problema, en particular en R. enfoques simples que involucran menos escritura son generalmente mejores. Es también importante que su código sea legible, para que usted y otros puedan entender lo que está pasando sin demasiados problemas.


- Class: text
  Output: Si R tiene una función incorporada para una tarea en particular, es probable que la función esté altamente optimizada para ese propósito y es su mejor opción. A medida que usted se convierta en un programador R avanzado, usted diseñará sus propias funciones para realizar tareas cuando no hay mejores opciones. Exploraremos escribir sus propias funciones en lecciones futuras.

- Class: text
  Output: Otra función relacionada con la creación de secuencias de números es rep(), que es sinónimo de 'réplica'. Echemos un vistazo a algunos usos de esta función.

- Class: cmd_question
  Output: Si estamos interesados ​​en la creación de un vector que contiene 40 ceros, podemos utilizar rep(0, times=40). Intentalo.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Escribe rep(0, times = 40) para hacer un vector que contiene 40 ceros.

- Class: cmd_question
  Output: Si en cambio queremos que nuestro vector contenga 10 repeticiones del vector (0, 1, 2), podemos hacer rep(c(0, 1, 2), times = 10). Adelante.
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Pruebe rep(c (0, 1, 2), times = 10) para diferentes variaciones sobre el mismo tema. Asegúrese de utilizar la función c() para decirle R que los números 0, 1 y 2 constituyen un vector.

- Class: cmd_question
  Output: Por último, vamos a decir que en lugar de repetir el vector (0, 1, 2) una y otra vez, queremos que nuestro vector contenga 10 ceros, luego  10 unos, y luego 10 dos. Podemos hacer esto con el argumento `each`. Trate de rep(c (0, 1, 2), each = 10).
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: Escriba rep(c (0, 1, 2), each = 10) para ver cómo el argumento `each` de la función rep() altera su comportamiento ligeramente.


