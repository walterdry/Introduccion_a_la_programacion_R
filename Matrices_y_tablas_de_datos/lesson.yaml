- Class: meta
  Course: Programando en R
  Lesson: Matrices y tablas de datos
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: En esta lección, vamos a cubrir las matrices y tablas tramas de datos. Ambos representan los tipos de datos "rectangulares", lo que significa que se utilizan para almacenar datos tabulares, con filas y columnas.

- Class: text
  Output: La principal diferencia, como se verá, es que las matrices sólo pueden contener una sola clase de datos, mientras que las tramas de datos o data frames pueden consistir en muchas clases diferentes de datos.

- Class: cmd_question
  Output: Vamos a crear un vector que contiene los números del 1 al 20 con el operador `:`. Almacene el resultado en una variable llamada my_vector.
  CorrectAnswer: my_vector <- 1:20
  AnswerTests: omnitest(correctExpr='my_vector <- 1:20')
  Hint: Usted aprendió acerca de la operador `:` en la lección sobre secuencias. Si desea crear un vector que contiene los números 1, 2 y 3 (en ese orden), se puede utilizar tanto c(1, 2, 3) como 1:3. En este caso, queremos que los números del 1 al 20, almacenados en una variable llamada my_vector. Además, recuerde que usted no necesita la función c() cuando utilice `:`.

- Class: cmd_question
  Output: Vea el contenido del vector que acaba de crear.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Simplemente escriba my_vector para ver su contenido.

- Class: cmd_question
  Output: La función dim() nos dice las "dimensiones" de un objeto. ¿Qué sucede si usamos dim(my_vector)? Dese una oportunidad.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Sólo tienes que escribir dim(my_vector) para ver qué pasa.

- Class: cmd_question
  Output: Claramente, eso no es muy útil! Dado que my_vector es un vector, no tiene un atributo `dim` (por lo que es sólo NULL), pero podemos obtener su longitud usando la función length(). Trate de eso ahora.
  CorrectAnswer: length(my_vector)
  AnswerTests: omnitest(correctExpr='length(my_vector)')
  Hint: Escriba length(my_vector) para ver la longitud del vector que acaba de crear.

- Class: cmd_question
  Output: Ah! Eso es lo que queríamos. Pero, ¿qué pasa si le damos a my_vector un atributo `dim`? Hagamos un intento. Escriba dim(my_vector) <- c(4, 5).
  CorrectAnswer: dim(my_vector) <- c(4, 5)
  AnswerTests: omnitest(correctExpr='dim(my_vector) <- c(4, 5)')
  Hint: Escriba dim(my_vector) <- c(4, 5) para dar a my_vector un atributo `dim`.

- Class: text
  Output: Está bien si ese último comando le pareció un poco extraño. ¡Debería! La función dim() le permite obtener o establecer el atributo `dim` para un objeto en R. En este caso, asignamos el valor c(4, 5) para el atributo `dim` de my_vector.

- Class: cmd_question
  Output: Utilice dim(my_vector) para confirmar que hemos establecido correctamente el atributo `dim`.
  CorrectAnswer: dim(my_vector)
  AnswerTests: omnitest(correctExpr='dim(my_vector)')
  Hint: Sólo tienes que escribir dim(my_vector) para asegurarse de que el atributo `dim` se ha establecido.

- Class: cmd_question
  Output: Otra forma de ver esto es llamando a función attributes() sobre my_vector. Inténtalo ahora.
  CorrectAnswer: attributes(my_vector)
  AnswerTests: omnitest(correctExpr='attributes(my_vector)')
  Hint: El comando attributes(my_vector) te mostrará todos los atributos para el objeto my_vector.

- Class: text
  Output: Al igual que en la clase de matemáticas, cuando se trata de un objeto de 2 dimensiones (piense en una mesa rectangular), el primer número es el número de filas y el segundo es el número de columnas. Por lo tanto, asignamos a my_vector 4 filas y 5 columnas.

- Class: cmd_question
  Output: Pero, espera! Eso no suena como que siga siendo un vector. Bueno, no lo es. Ahora es una matriz. Ver el contenido de my_vector ahora para ver lo que parece.
  CorrectAnswer: my_vector
  AnswerTests: omnitest(correctExpr='my_vector')
  Hint: Escriba my_vector para ver su contenido.

- Class: cmd_question
  Output: Ahora, vamos a confirmar que en realidad es una matriz mediante el uso de la función class(). Escriba class(my_vector) para ver lo que quiero decir.
  CorrectAnswer: class(my_vector)
  AnswerTests: omnitest(correctExpr='class(my_vector)')
  Hint: Escriba class(my_vector) para ver la clase de my_vector.

- Class: cmd_question
  Output: Efectivamente, my_vector es ahora una matriz. Deberíamos almacenarlo en una nueva variable que nos ayude a recordar lo que es. Almacene el valor de my_vector en una nueva variable llamada my_matrix.
  CorrectAnswer: my_matrix <- my_vector
  AnswerTests: omnitest(correctExpr='my_matrix <- my_vector')
  Hint: Puesto que no podemos simplemente cambiar el nombre de nuestra variable my_vector, le asignaremos su valor a una nueva variable con my_matrix <- my_vector.

- Class: text
  Output: El ejemplo que hemos utilizado hasta ahora estaba destinado a ilustrar el punto de que una matriz es simplemente un vector atómico con un atributo de dimensión. Un método más directo de la creación de la misma matriz utiliza la función de matrix().

- Class: cmd_question
  Output: Abra el archivo de ayuda para la función de matrix() ahora usando la función `?`.
  CorrectAnswer: ?matrix
  AnswerTests: omnitest(correctExpr='?matrix')
  Hint: El comando ?matrix hará el truco.

- Class: cmd_question
  Output:  Ahora, mira la documentación para la función matrix y vea si puede encontrar la manera de crear una matriz que contenga los mismos números (1-20) y dimensiones (4 filas, 5 columnas) llamando a la función de matrix(). Almacene el resultado en una variable llamada my_matrix2.
  CorrectAnswer: my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
  AnswerTests: calculates_same_value('matrix(1:20, nrow=4, ncol=5)'); expr_creates_var('my_matrix2')
  Hint: Llame a la función de matrix() con tres argumentos -- 1:20, el número de filas y el número de columnas. Asegúrese de especificar los argumentos por su nombre y guardar el resultado en my_matrix2 (no en my_matrix).

- Class: cmd_question
  Output: Por último, vamos a confirmar que my_matrix y my_matrix2 son en realidad idénticos. La función identical() nos dirá si sus dos primeros argumentos son los mismos. Inténtalo.
  CorrectAnswer: identical(my_matrix, my_matrix2)
  AnswerTests: any_of_exprs('identical(my_matrix, my_matrix2)', 'identical(my_matrix2, my_matrix)')
  Hint: Si no está seguro acerca de esto, entonces la revice de la documentación de identical() utilizando la función `?`.

- Class: text
  Output: Ahora, imagine que los números en la tabla representan algunas medidas de un experimento clínico, donde cada fila representa un paciente y cada columna representa una variable para la que se tomaron mediciones.

- Class: text
  Output: Podemos querer etiquetar las filas, para que sepamos qué números pertenecen a cada paciente en el experimento. Una forma de hacer esto es agregar una columna a la matriz, que contiene los nombres de las cuatro personas.

- Class: cmd_question
  Output: Vamos a empezar por la creación de un vector de caracteres que contenga los nombres de nuestros pacientes - Bill, Gina, Kelly, y Sean. Recuerde que las comillas dobles dicen a R que algo es una cadena de caracteres. Almacene el resultado en la variable llamada patients.
  CorrectAnswer: patients <- c("Bill", "Gina", "Kelly", "Sean")
  AnswerTests: omnitest(correctExpr='patients <- c("Bill", "Gina", "Kelly", "Sean")')
  Hint: Asegúrese de capitalizar la primera letra de cada nombre y guarde el resultado en la variable llamada patients. Además, no altere el orden de los pacientes! Eso sería un desastre!

- Class: cmd_question
  Output: Ahora vamos a utilizar la función cbind() para 'combinar columnas'. No te preocupes por guardar el resultado en una nueva variable. Sólo tiene que llamar cbind() con dos argumentos - el vector patients y my_matrix.
  CorrectAnswer: cbind(patients, my_matrix)
  AnswerTests: omnitest(correctExpr='cbind(patients, my_matrix)')
  Hint: Escriba cbind(patients, my_matrix) para añadir los nombres de nuestros pacientes a la matriz de números.

- Class: text
  Output: Algo no huele bien sobre nuestro resultado! Parece que la combinación del vector de caracteres  con nuestra matriz de números causó que todo quedara entre comillas dobles. Esto significa que nos quedamos con una matriz de cadenas de caracteres, lo que no es bueno.

- Class: text
  Output: Si usted recuerda, al principio de esta lección, te dije que las matrices sólo pueden contener una clase de datos. Por lo tanto, cuando tratamos de combinar un vector de caracteres con una matriz numérica, R se vio obligado a 'coaccionar' los números a caracteres, de ahí las comillas dobles.

- Class: text
  Output: Esto se llama "la coerción implícita ', porque no lo pedimos. Esto simplemente sucedió. Pero ¿por qué R no convirtió los nombres de nuestros pacientes a números? Voy a dejar que usted que reflexione sobre este asunto por su cuenta.

- Class: cmd_question
  Output: Por lo tanto, estamos todavía en la cuestión de cómo incluir los nombres de nuestros pacientes en la tabla, sin destruir la integridad de nuestros datos numéricos. Pruebe lo siguiente -- my_data <- data.frame(patients, my_matrix)
  CorrectAnswer: my_data <- data.frame(patients, my_matrix)
  AnswerTests: omnitest(correctExpr='my_data <- data.frame(patients, my_matrix)')
  Hint: Escriba my_data <- data.frame(patients, my_matrix), para lo que podamos explorar lo que sucede.

- Class: cmd_question
  Output: Ahora vea el contenido de my_data para ver a lo que hemos llegado.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Escriba my_data para ver su contenido.

- Class: text
  Output: Parece que la función data.frame() nos permitió guardar nuestro vector de caracteres de los nombres justo al lado de nuestra matriz de números. Eso es exactamente lo que esperábamos! 

- Class: text
  Output: Detrás de las escenas, la función data.frame() toma cualquier número de argumentos y devuelve un único objeto de la clase `data.frame` que se compone de los objetos originales.

- Class: cmd_question
  Output: Vamos a confirmar esto llamando a la función de class() en nuestro recien creado data frame.
  CorrectAnswer: class(my_data)
  AnswerTests: omnitest(correctExpr='class(my_data)')
  Hint: La función class() toma un argumento - el objeto del cual se desea determinar su clase.

- Class: text
  Output: También es posible asignar nombres a las filas individuales y columnas de una trama de datos (data frame), que presenta otra posible forma de determinar qué fila de valores en nuestra tabla pertenece a cada paciente.

- Class: text
  Output: Sin embargo, puesto que ya hemos resuelto ese problema, vamos a resolver un problema diferente, que es asignar nombres a las columnas de nuestra tabla de datos para que sepamos qué tipo de medición representa cada columna.

- Class: cmd_question
  Output: Dado que tenemos seis columnas (incluyendo nombres de los pacientes), tendremos que crear primero un vector que contenga un elemento para cada columna. Crearemos un vector de caracteres llamado cnames que contenga los valores siguientes (en orden) -- "patient", "age", "weight", "bp", "rating", "test".
  CorrectAnswer: cnames <- c("patient", "age", "weight", "bp", "rating", "test")
  AnswerTests: omnitest(correctExpr='cnames <- c("patient", "age", "weight", "bp", "rating", "test")')
  Hint: Asegúrese de que todos los nombres están en minúsculas, encerrados por comillas dobles y separados por comas. No te olvides de usar la función c().

- Class: cmd_question
  Output: Ahora, utilice la funcion colnames() para establecer el atributo `colnames` para nuestra tabla de datos o data frame. Esto es similar a la forma en que usamos la función dim() anteriormente en esta lección.
  CorrectAnswer: colnames(my_data) <- cnames
  AnswerTests: omnitest(correctExpr='colnames(my_data) <- cnames')
  Hint: Pruebe colnames(my_data) <- cnames.

- Class: cmd_question
  Output: Veamos si el trabajo esta hecho. Imprima el contenido de my_data.
  CorrectAnswer: my_data
  AnswerTests: omnitest(correctExpr='my_data')
  Hint: Imprime el contenido de my_data en la consola.

- Class: text
  Output: En esta lección, usted aprendió lo básico de trabajar con dos estructuras de datos muy importantes y comunes en R -- matrices y tablas de datos. Hay mucho más que aprender y vamos a estar cubriendo temas más avanzados, particularmente con respecto a las tablas de datos, en las lecciones futuras.


