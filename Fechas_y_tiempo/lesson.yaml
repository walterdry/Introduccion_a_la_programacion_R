- Class: meta
  Course: Programando en R
  Lesson: Fechas y Horas
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: R tiene una manera especial de representar fechas y horas, lo cual puede ser útil si se trabaja con datos que muestran cómo algo cambia con el tiempo (es decir, datos de series de tiempo) o si sus datos contienen alguna otra información temporal, como fechas de nacimiento.

- Class: text
  Output: Las fechas están representados por la clase 'Date' y los tiempos están representados por las clases 'POSIXct' y 'POSIXlt'. Internamente, las fechas se almacenan como el número de días desde 01/01/1970 y los tiempos como el número de segundos desde 01/01/1970 (para 'POSIXct') o como una lista de segundos, minutos, horas, etc (para 'POSIXlt').

- Class: cmd_question
  Output: Comencemos usando d1 <- Sys.Date() para obtener la fecha actual y almacenarla en la variable d1. (Esto es la letra 'd' y el número 1).
  CorrectAnswer: d1 <- Sys.Date()
  AnswerTests: omnitest(correctExpr='d1 <- Sys.Date()')
  Hint: Escriba d1 <- Sys.Date() para obtener la fecha actual y almacenarla en una nueva variable llamada d1.

- Class: cmd_question
  Output: Utilice la función class() para confirmar que d1 es un objeto 'Date'.
  CorrectAnswer: class(d1)
  AnswerTests: omnitest(correctExpr='class(d1)')
  Hint: class(d1) le dirá la clase de d1.

- Class: cmd_question
  Output: Podemos utilizar la función unclass() para ver como luce internamente la variable d1. Inténtalo.
  CorrectAnswer: unclass(d1)
  AnswerTests: omnitest(correctExpr='unclass(d1)')
  Hint: Utilice unclass(d1) para ver como es d1 internamente.

- Class: text
  Output: Ese es el número exacto de días desde el 01/01/1970!

- Class: cmd_question
  Output: in embargo, si imprime d1 en la consola, obtendrá la fecha de hoy en el formato AÑO-MES-DIA (Por defecto, cuando R imprime o recibe por parámetros las fechas, lo hace en el formato AÑO-MES-DIA). Dese una oportunidad.
  CorrectAnswer: d1
  AnswerTests: omnitest(correctExpr='d1')
  Hint: Escriba d1 para imprimir su contenido.

- Class: cmd_question
  Output: ¿Qué pasa si tenemos que hacer referencia a una fecha anterior a 01/01/1970? Cree una variable d2 que contenga as.Date("1969-01-01").
  CorrectAnswer: d2 <- as.Date("1969-01-01")
  AnswerTests: omnitest(correctExpr='d2 <- as.Date("1969-01-01")')
  Hint: Pruebe con d2 <- as.Date("1969-01-01").

- Class: cmd_question
  Output: Ahora utilice unclass() de nuevo para ver como se almacena d2 internamente.
  CorrectAnswer: unclass(d2)
  AnswerTests: omnitest(correctExpr='unclass(d2)')
  Hint: unclass(d2) le mostrará como d2 luce internamente.

- Class: text
  Output: Como usted pudo haber esperado, se obtiene un número negativo. En este caso, es -365, dado que 01/01/1969 está exactamente a un año calendario (es decir, 365 días) antes de  01/01/1970.

- Class: cmd_question
  Output: Ahora, vamos a echar un vistazo a cómo R almacena las horas. Puede acceder a la fecha y la hora actual usando la función Sys.time() sin argumentos. Haga esto y guarde el resultado en una variable llamada t1.
  CorrectAnswer: t1 <- Sys.time()
  AnswerTests: omnitest(correctExpr='t1 <- Sys.time()')
  Hint: t1 <- Sys.time() almacenará la fecha y la hora actual en una variable llamada t1.

- Class: cmd_question
  Output: Vea el contenido de t1.
  CorrectAnswer: t1
  AnswerTests: omnitest(correctExpr='t1')
  Hint: Escriba t1 para ver su contenido.

- Class: cmd_question
  Output: Y compruebe la clase de t1 con class().
  CorrectAnswer: class(t1)
  AnswerTests: omnitest(correctExpr='class(t1)')
  Hint: Vea la clase de t1 con la class(t1).

- Class: cmd_question
  Output: omo se mencionó anteriormente, POSIXct es sólo una de las dos formas en que R representa la información de tiempo. (Puede pasar por alto el segundo valor de arriba, POSIXt, que sólo funciona como un lenguaje común entre POSIXct y POSIXlt.) Utilice unclass() para ver lo que luce t1 internamente - el número grande son los segundos desde el comienzo de 1970.
  CorrectAnswer: unclass(t1)
  AnswerTests: omnitest(correctExpr='unclass(t1)')
  Hint: Utilice unclass(t1) para ver cuántos segundos han pasado desde el inicio de 1970.

- Class: cmd_question
  Output: Por defecto, Sys.time() devuelve un objeto de la clase POSIXct, pero podemos convertir el resultado a POSIXlt con as.POSIXlt(Sys.time()). Dese una oportunidad y almacene el resultado en t2.
  CorrectAnswer: t2 <- as.POSIXlt(Sys.time())
  AnswerTests: omnitest(correctExpr='t2 <- as.POSIXlt(Sys.time())')
  Hint: t2 <- as.POSIXlt(Sys.time()) convertirá el resultado de Sys.time a 'POSIXlt' y almacena el resultado en t2.

- Class: cmd_question
  Output: Compruebe la clase de t2.
  CorrectAnswer: class(t2)
  AnswerTests: omnitest(correctExpr='class(t2)')
  Hint: Escriba class(t2) para ver su clase.

- Class: cmd_question
  Output: Ahora vea su contenido.
  CorrectAnswer: t2
  AnswerTests: omnitest(correctExpr='t2')
  Hint: Escriba t2 para ver su contenido.

- Class: cmd_question
  Output: El formato impreso de t2 es idéntico al de t1. Ahora escriba unclass(t2) para ver en qué se diferencian internamente.
  CorrectAnswer: unclass(t2)
  AnswerTests: omnitest(correctExpr='unclass(t2)')
  Hint: Utilice unclass(t2) para ver su estructura interna.

- Class: cmd_question
  Output: t2, como todos los objetos POSIXlt, es sólo una lista de los valores que componen la fecha y la hora. Utilice str(unclass(t2)) para tener una visión más compacta.
  CorrectAnswer: str(unclass(t2))
  AnswerTests: omnitest(correctExpr='str(unclass(t2))')
  Hint: Utilice str(unclass(t2)) para ver su estructura interna de una manera más compacta.

- Class: cmd_question
  Output: Sí por ejemplo, queremos sólo los minutos de la hora almacenada en t2, podemos acceder a ellos con t2$min. Intentalo.
  CorrectAnswer: t2$min
  AnswerTests: omnitest(correctExpr='t2$min')
  Hint: t2$min le dará el número de minutos de la hora almacenada en t2.

- Class: text
  Output: Ahora que hemos explorado los tres tipos de objetos de fecha y hora , echemos un vistazo a algunas funciones que extraen información útil de cualquiera de estos objetos -- weekdays(), months(), y quarters().

- Class: cmd_question
  Output: La función weekdays() devolverá el día de la semana de cualquier objeto de tipo fecha o hora. Pruébelo en d1, que es el objeto Date que contiene la fecha de hoy.
  CorrectAnswer: weekdays(d1)
  AnswerTests: omnitest(correctExpr='weekdays(d1)')
  Hint: Pruebe los días de weekdays(d1) para obtener el día de la semana.

- Class: cmd_question
  Output: La función de los months() también funciona en cualquier objeto tipo fecha u hora. Pruébalo en t1, que es el objeto POSIXct que contiene la hora actual (bueno, era la hora actual cuando lo creó).
  CorrectAnswer: months(t1)
  AnswerTests: omnitest(correctExpr='months(t1)')
  Hint: months(t1) le dará el mes en curso.

- Class: cmd_question
  Output: La función quarters() devuelve el trimestre del año (Q1-Q4) de cualquier objeto del tipo fecha u hora. Pruébalo en t2, que es el objeto POSIXlt que contiene la hora en la que se creó.
  CorrectAnswer: quarters(t2)
  AnswerTests: omnitest(correctExpr='quarters(t2)')
  Hint: quarters(t2) le dará el trimestre actual.

- Class: text
  Output: A menudo, las fechas y horas en un conjunto de datos estarán en un formato que R no reconoce. La función strptime() puede ser útil en esta situación.

- Class: text
  Output: strptime() convierte vectores de caracteres al formato POSIXlt. En ese sentido, es similar a as.POSIXlt(), excepto que la entrada no tiene que estar en un formato especial (AAAA-MM-DD).

- Class: cmd_question
  Output: 'Para ver cómo funciona, almacene la cadena de caracteres siguiente en una variable llamada t3: "17 de octubre de 1986 08:24" (con las comillas).'
  CorrectAnswer: t3 <- "17 de octubre de 1986 08:24"
  AnswerTests: omnitest(correctExpr='t3 <- "17 de octubre de 1986 08:24"')
  Hint: Guarde "17 de octubre de 1986 08:24" (incluyendo las comillas) en una nueva variable llamada t3.

- Class: cmd_question
  Output: 'Ahora, use strptime(t3, "%d de %B de %Y %H:%M") para ayudar a R a convertir nuestro objeto de fecha/hora a un formato que el pueda entender. Asigne el resultado de una nueva variable llamada t4. (Usted puede abrir la documentación para strptime() si quisiera saber más acerca de cómo funciona).'
  CorrectAnswer: t4 <- strptime(t3, "%d de %B de %Y %H:%M")
  AnswerTests: omnitest(correctExpr='t4 <- strptime(t3, "%d de %B de %Y %H:%M")')
  Hint: 't4 <- strptime(t3, "%d de %B de %Y %H:%M") convertirá nuestro objeto de fecha/hora a un formato que entiende R'

- Class: cmd_question
  Output: Imprime el contenido de t4.
  CorrectAnswer: t4
  AnswerTests: omnitest(correctExpr='t4')
  Hint: Escriba t4 para imprimir su contenido.

- Class: cmd_question
  Output: Este es el formato esperamos. Ahora, vamos a ver su clase con class().
  CorrectAnswer: class(t4)
  AnswerTests: omnitest(correctExpr='class(t4)')
  Hint: Escribe class(t4) para comprobar su clase.

- Class: text
  Output: Por último, hay una serie de operaciones que se pueden realizar en las fechas y horas, incluidas las operaciones aritméticas (+ y -) y las de comparaciones (<, ==, etc.) 

- Class: cmd_question
  Output: "La variable t1 contiene el tiempo en el que se creó (recordemos que utilizó Sys.time()) Confirme que ha pasado algún tiempo desde que creó t1 utilizando el operador 'mayor que' para compararlo con la hora actual. : Sys.time() > t1"
  CorrectAnswer: Sys.time() > t1
  AnswerTests: omnitest(correctExpr='Sys.time() > t1')
  Hint: Sys.time() > t1 le dirá que el momento actual es posterior de la hora que figura en t1 (que era la hora actual cuando lo creó).

- Class: cmd_question
  Output: Así que sabemos que ha pasado algún tiempo, pero ¿cuánto? Trate restando t1 de la hora actual con Sys.time() - t1. No olvide los paréntesis al final de Sys.time(), ya que es una función.
  CorrectAnswer: Sys.time() - t1
  AnswerTests: omnitest(correctExpr='Sys.time() - t1')
  Hint: Sys.time() - t1 le dará la cantidad de tiempo que ha pasado desde que se creó t1.

- Class: text
  Output: En la misma línea de pensamiento se aplica la suma y los otros operadores de comparación. Si desea más control sobre las unidades, al calcular la diferencia de tiempo anterior  puede utilizar la función difftime(), la cual le permite especificar el parámetro 'units'. 

- Class: cmd_question
  Output: Use difftime(Sys.time(), t1, units = 'days') para encontrar la cantidad de tiempo en días que ha pasado desde que creó t1.
  CorrectAnswer: difftime(Sys.time(), t1, units = 'days')
  AnswerTests: match_call("difftime(Sys.time(), t1, units = 'days')")
  Hint: difftime(Sys.time(), t1, units = 'days') le dirá cuántos días han pasado desde que se creó t1 (que ojala que sea menos de 1!)

- Class: text
  Output: En esta lección, ha aprendido a trabajar con fechas y horas en R. Si bien es importante comprender los fundamentos, si usted se encuentra trabajando con las fechas y horas a menudo, es posible que desee comprobar el paquete lubridate desarrollado por Hadley Wickham.


