- Class: meta
  Course: Programando en R
  Lesson: vapply y tapply
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.11

- Class: text
  Output: "En la última lección, usted aprendió sobre dos de los miembros más importantes de la familia de funciones *apply de R: lapply() y sapply(). Ambos toman una lista como entrada, aplican una función a cada elemento de la lista y entonces combinan y devuelven el resultado. lapply() siempre devuelve una lista, mientras que sapply() intenta simplificar el resultado como un vector."

- Class: text
  Output: En esta lección, aprenderá cómo utilizar vapply() y tapply(), cada uno de los cuales sirve a un propósito muy específico dentro de la metodología Dividir-Aplicar-Combinar. Por coherencia, vamos a utilizar el mismo conjunto de datos que utilizamos en la lección "lapply y sapply".

- Class: text
  Output: "El conjunto de datos flags del aprendizaje del repositorio UCI Machine contiene detalles de diversas naciones y sus banderas. Más información se puede encontrar aquí: Http://archive.ics.uci.edu/ml/datasets/Flags"

- Class: text
  Output: He almacenado los datos en una variable llamada flags. Si ha pasado un tiempo desde que completó la lección "lapply y sapply", es posible que desee reencontrarse con los datos mediante el uso de funciones como dim(), head(), str() y summary() cuando regrese a la símbolo (>). También puede escribir viewinfo() en el indicador para que aparezca algún tipo de documentación para el conjunto de datos. ¡Empecemos!

- Class: cmd_question
  Output: Como vimos en la lección anterior, la función unique() devuelve un vector de los valores únicos contenidos en el objeto que se le pasa. Por lo tanto, sapply(flags, unique) devuelve una lista que contiene un vector de valores únicos para cada columna del conjunto de datos flags. Inténtalo de nuevo ahora.
  CorrectAnswer: sapply(flags, unique)
  AnswerTests: omnitest(correctExpr='sapply(flags, unique)')
  Hint: Utilice sapply(flags, unique) para devolver una lista que contenga un vector de valores únicos para cada columna del conjunto de datos flags.

- Class: text
  Output: ¿Si hubiera olvidado como funciona unique() y equivocadamente pensara que devuelve el *número* de los valores únicos contenidos en el objeto que se le pasa? Entonces podría haber esperado incorrectamente que sapply(flags, unique) devolvería un vector numérico, ya que cada elemento de la lista devuelta contendría un solo número y que sapply() entonces podría simplificar el resultado en un vector.

- Class: text
  Output: Cuando se trabaja de forma interactiva (en el indicador >), esto no es un gran problema, ya que se ve el resultado de inmediato y puede reconocer rápidamente su error. Sin embargo, cuando se trabaja de forma no interactiva (por ejemplo, al escribir sus propias funciones), un malentendido puede pasar desapercibido y causar resultados incorrectos en el más adelante. Por lo tanto, es posible que desee tener más cuidado y ahí es donde vapply() es útil.

- Class: text
  Output: Mientras que sapply() intenta "adivinar" el formato correcto del resultado, vapply() le permite especificarlo explícitamente. Si el resultado no coincide con el formato que especifique, vapply() lanzará un error que hirá que la operación se detenga. Esto puede evitar problemas significativos en su código, que podrían ser causados ​​por conseguir valores de retorno inesperado de sapply().

- Class: cmd_question
  Output: Intente con vapply(flags, unique, numeric(1)), donde se indica que usted espera que cada elemento del resultado sea un vector numérico de longitud 1. Dado que este NO es realmente el caso, obtendrá un error. Una vez que obtenga el error, escriba ok() para continuar con la siguiente pregunta.
  CorrectAnswer: ok()
  AnswerTests: omnitest(correctExpr="ok()")
  Hint: Escriba vapply(flags, unique, numeric(1)), a continuación, escriba ok() para continuar con la siguiente pregunta.

- Class: cmd_question
  Output: Recuerde de la lección anterior que sapply(flags, class) devolverá un vector de caracteres que contiene la clase de cada columna en el conjunto de datos. Intente de nuevo ahora para ver el resultado.
  CorrectAnswer: sapply(flags, class)
  AnswerTests: omnitest(correctExpr="sapply(flags, class)")
  Hint: Escriba sapply(flags, class) para obtener un vector carácter con la clase de cada columna.

- Class: cmd_question
  Output: Si queremos ser explícitos sobre el formato del resultado que esperamos, podemos utilizar vapply(flags, class, character(1)). El argumento 'character(1)' dice a R que esperamos que la función class devolverá un vector de caracteres de longitud 1 cuando se aplique a cada columna del conjunto de datos flags. Inténtalo ahora.
  CorrectAnswer: vapply(flags, class, character(1))
  AnswerTests: omnitest(correctExpr="vapply(flags, class, character(1))")
  Hint: UUtilice vapply(flags, class, character(1)) para devolver un vector carácter de clases de columna.

- Class: text
  Output: Tenga en cuenta que dado que nuestra expectativa era correcta (es decir que el formato de salida de class es character(1)), el resultado de vapply() es idéntico al de sapply() - un vector carácter de clases de columna.
  
- Class: text
  Output: Usted puede pensar en vapply() como "más segura" que sapply(), ya que se requiere que se especifique el formato de la salida con antelación, en lugar de permitir que R 'adivine' lo que querías. Además, vapply() tiene mejor rendimiento que sapply() para grandes conjuntos de datos. Sin embargo, cuando se hace el análisis de datos de forma interactiva (en el indicador >), sapply(), nos ahorra un poco de escritura y suele ser lo suficientemente bueno.

- Class: text
  Output: Como analista de datos, a menudo deseará dividir sus datos en grupos, en función del valor de una variable y luego aplicar una función a cada grupo. La siguiente función que veremos, tapply(), hace exactamente eso.
  
- Class: cmd_question
  Output: Utilice ?tapply para desplegar la documentación de esta función. 
  CorrectAnswer: ?tapply
  AnswerTests: any_of_exprs('?tapply', 'help(tapply)')
  Hint: Levante el archivo de ayuda con ?tapply

- Class: cmd_question
  Output: La variable 'landmass' en nuestro conjunto de datos toma valores enteros entre 1 y 6, cada uno de los cuales representa una parte diferente del mundo (masas de tierra o masas continentales). Utilice la table(flags$landmass) para ver cuántas banderas/países se clasifican en cada grupo.
  CorrectAnswer: table(flags$landmass)
  AnswerTests: omnitest(correctExpr="table(flags$landmass)")
  Hint: Utilice table(flags$landmass) para ver cuántas banderas/países se clasifican en cada grupo.

- Class: cmd_question
  Output: La variable 'animate' en nuestro conjunto de datos toma el valor 1 si la bandera de un país contiene una imagen animada (por ejemplo, un águila, un árbol, una mano humana) y 0 en caso contrario. Utilice table(flags$animate) para ver cuántas banderas contiene una imagen animada.
  CorrectAnswer: table(flags$animate)
  AnswerTests: omnitest(correctExpr="table(flags$animate)")
  Hint: Utilice table(flags$animate) para ver cuántas banderas contiene una imagen animada.

- Class: text
  Output: Esto nos dice que 39 banderas contienen un objeto animado (animar = 1) y 155 no (animar = 0).

- Class: cmd_question
  Output: Si se toma la media aritmética de un montón de 0s y 1s, se obtiene la proporción de 1s. Utilice tapply(flags$animate, flags$landmass, mean) para aplicar la función mean a la variable 'animate' por separado para cada uno de los seis grupos por masa continental, lo que nos da la proporción de banderas que contienen una imagen animada dentro de cada grupo de masa continental.
  CorrectAnswer: tapply(flags$animate, flags$landmass, mean)
  AnswerTests: omnitest(correctExpr="tapply(flags$animate, flags$landmass, mean)")
  Hint: tapply(flags$animate, flags$landmass, mean) nos indicará la proporción de banderas que contienen una imagen animada dentro de cada grupo de masa de tierra continental.

- Class: text
  Output: El primer grupo de masa de tierra (landmass = 1) corresponde a América del Norte y contiene la mayor proporción de las banderas con una imagen animada con 0.4194 (41.9%).

- Class: cmd_question
  Output: Del mismo modo, podemos ver un resumen de los valores de la población (redondeados en millones) para los países con y sin el color rojo de su bandera con tapply(flags$population, flags$red, summary).
  CorrectAnswer: tapply(flags$population, flags$red, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$red, summary)")
  Hint: Puede ver un resumen de las poblaciones de los países con y sin el color rojo de su bandera con tapply(flags$population, flags$red, summary).

- Class: mult_question  
  Output: ¿Cuál es la mediana de la población (en millones) para los países *sin* el color rojo de su bandera?
  AnswerChoices: 9.0; 4.0; 27.6; 3.0; 22.1; 0.0
  CorrectAnswer: 3.0
  AnswerTests: omnitest(correctVal= '3.0')
  Hint: Utilice el resultado de la última pregunta. Recordemos que el red = 0 significa que el color rojo no está presente en la bandera del país.

- Class: cmd_question
  Output: Por último, utilizar el mismo enfoque para ver un resumen de los valores de población para cada una de las seis masas continentales.
  CorrectAnswer: tapply(flags$population, flags$landmass, summary)
  AnswerTests: omnitest(correctExpr="tapply(flags$population, flags$landmass, summary)")
  Hint: "Se puede ver un resumen de las poblaciones de cada una de las seis masas llamando a tapply() con tres argumentos: flags$population, flags$landmass, and summary."

- Class: mult_question  
  Output: ¿Cuál es el máximo de población (en millones) para el cuarto grupo de masa (África)?
  AnswerChoices: 56.00; 1010.0; 119.0; 5.00; 157.00
  CorrectAnswer: 56.00
  AnswerTests: omnitest(correctVal= '56.00')
  Hint: Utilice el resultado de la última pregunta.

- Class: text  
  Output: En esta lección, ha aprendido a utilizar vapply() como una alternativa más segura a sapply(), que es más útil al escribir sus propias funciones. También ha aprendido a utilizar tapply() para dividir los datos en grupos basados ​​en el valor de una variable, luego aplicar una función a cada grupo. Estas funciones serán útiles en su búsqueda para convertirse en un mejor analista de datos.


